name: Build/release

on: push

jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v1

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v1
        with:
          node-version: 16

      - name: Get yarn cache dir
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Yarn cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-node${{ matrix.node }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-node${{ matrix.node }}-
      - uses: maxim-lobanov/setup-xcode@v1
        if: ${{ runner.os == 'macOS' }}
        with:
          xcode-version: latest-stable

      - uses: microsoft/playwright-github-action@v1

      - if: ${{ runner.os == 'Linux' }}
        run: sudo apt-get update -y && sudo apt-get install -y libarchive-tools

      - name: Sets env vars for release
        shell: bash
        run: |
          if [[ $GITHUB_REF == 'refs/heads/dev' ]]; then
            echo "DEBUG_LOGGING=true" >> $GITHUB_ENV
          fi

      - name: yarn install
        run: yarn install
      - name: setup env
        env:
          YOUTUBECLIENTID: "${{ secrets.YOUTUBECLIENTID }}"
          YOUTUBECLIENTSECRET: "${{ secrets.YOUTUBECLIENTSECRET }}"
          LASTFMAPIKEY: "${{ secrets.LASTFMAPIKEY }}"
          LASTFMSECRET: "${{ secrets.LASTFMSECRET }}"
          SPOTIFYCLIENTID: "${{ secrets.SPOTIFYCLIENTID }}"
          SPOTIFYCLIENTSECRET: "${{ secrets.SPOTIFYCLIENTSECRET }}"
          FANARTTVAPIKEY: "${{ secrets.FANARTTVAPIKEY }}"
        run: chmod +x setup_env.sh && . setup_env.sh
        shell: bash

      - run: yarn test:unit

      # - run: xvfb-run --auto-servernum --server-args="-screen 0 1280x960x24" -- yarn test:electron
      #   if: matrix.os == 'ubuntu-latest'

      # - run: yarn test:electron
      #   if: matrix.os != 'ubuntu-latest'

      - name: yarn electron:build
        run: yarn electron:build
        if: ${{ runner.os == 'Windows' }}
        env:
          CSC_LINK: ${{ secrets.WIN_CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          WIN_CSC_LINK: ${{ secrets.WIN_CSC_LINK }}
          WIN_CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CI: true

      - name: yarn electron:build
        run: yarn electron:build
        if: ${{ runner.os != 'Windows' }}
        env:
          CSC_LINK: ${{ secrets.MAC_CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CI: true

      - uses: actions/upload-artifact@v2
        if: ${{ runner.os == 'Windows' }}
        with:
          name: Windows Exe
          path: |
            dist_electron/*.exe
            dist_electron/latest*.yml

      - uses: actions/upload-artifact@v2
        if: ${{ runner.os == 'Linux' }}
        with:
          name: Linux Snap
          path: dist_electron/*.snap
      - uses: actions/upload-artifact@v2
        if: ${{ runner.os == 'Linux' }}
        with:
          name: Linux AppImage
          path: |
            dist_electron/*.AppImage
            dist_electron/latest*.yml
      - uses: actions/upload-artifact@v2
        if: ${{ runner.os == 'Linux' }}
        with:
          name: Arch linux Pacman
          path: |
            dist_electron/*.pacman
      - uses: actions/upload-artifact@v2
        if: ${{ runner.os == 'Linux' }}
        with:
          name: Linux tar.gz
          path: dist_electron/*.tar.gz
      - uses: actions/upload-artifact@v2
        if: ${{ runner.os == 'Linux' }}
        with:
          name: Linux Deb
          path: dist_electron/*.deb

      - uses: actions/upload-artifact@v2
        if: ${{ runner.os == 'macOS' }}
        with:
          name: MacOS Dmg
          path: |
            dist_electron/*.dmg
            dist_electron/latest*.yml
